float4x4 matWorldViewProj;
float4x4 matWorld;
float3 vecViewPosition;

float3 vecSunDirection;
float3 vecSunColor;		
float3 vecSkyColor;
float fMultiplySunColor;
float fMultiplyHorizonColor;
float3 vecHorizonColor;
float fHorizonExp;
float fSunExp;
float fFogStart;
float fFogEnd;
float fScatterEnd;
float3 vecScatterStartColor;
float3 vecScatterEndColor;
float fMultiplyObjectScatter;
float3 vecSectorPosition;
float3 vecFogColor;

float4x4 matShadowProjectionTexScale;
float4x4 matCharacterShadowCameraProj;
float4x4 matSimpleProjectionTexScale;

float4x4 matSunLightDirection;
float4 vecShadowColor;
float4 vecObjectLightmapLightIntensity;
float4 vecCloudShadow;
float3 vecSpecularColor;
float3 vecGlareColor;


struct VS_OUTPUT
{
    float4 Position   : POSITION;   // vertex position     
    float4 Texture    : TEXCOORD0;
    float3 Tangent	  : COLOR0;
    float3 Binormal   : COLOR1;
    float3 Normal	  : TEXCOORD3;            
    float3 Half		  : TEXCOORD4;
    float4 Texture2  : TEXCOORD5;    
    float2 CloudShadowmap : TEXCOORD6;
    float4 Fex		  : TEXCOORD1;
    float3 Lin		  : TEXCOORD2;
};

sampler ColorTextureSampler : register(s0);
sampler NormalTextureSampler : register(s1);
samplerCUBE LightSampler : register( s2 );
sampler ShadowmapSampler : register( s3 );
sampler CloudShadowmapSampler : register( s4 );
sampler CharacterShadowmapSampler : register( s6 );
sampler SpecularTextureSampler: register( s7 );

void HoffmanScattering( in float4 vecPosition, out float3 vecLin, out float3 vecFex )
{
	float4 vecTransformPosition = mul( vecPosition, matWorld );
	float3 vecViewDirection = vecTransformPosition - vecViewPosition;
	float fLens = length( vecViewDirection );
		
	vecViewDirection = normalize( vecViewDirection );
	
	float fTheta = saturate( dot( vecSunDirection, vecViewDirection ) );
	float fSunTheta = pow( fTheta, fSunExp );
	
	float3 vecXYDirection = vecViewDirection;	
	vecXYDirection.y = 0.0f;	
	vecXYDirection = normalize( vecXYDirection );		
		
	float3 vecHorizon = pow( saturate( dot( vecXYDirection, vecViewDirection ) ), fHorizonExp ) * vecHorizonColor * fMultiplyHorizonColor;
	
	float3 vecInscatter = vecSunColor * fSunTheta * fMultiplySunColor + vecFogColor;// + vecHorizon;		
	
	float fPhase1 = 1.0f + fTheta * fTheta;		
	
	float fFogRate = saturate( ( fLens - fFogStart ) / ( fFogEnd - fFogStart ) );
	fFogRate *= fPhase1;	
		
	vecInscatter = lerp( float3( 0.0f, 0.0f, 0.0f ), vecInscatter * fPhase1, fFogRate );		
	
	
	vecLin = vecInscatter;	
		
	float fScatterRate = saturate( fLens / fScatterEnd );
	vecFex = lerp( vecScatterStartColor, vecScatterEndColor, fScatterRate ) * fMultiplyObjectScatter;		
}

float2 CloudShadow( in float4 vPos )
{
	float4 vecPosition = mul( vPos, matWorld );		
	vecPosition.x = vecPosition.x * vecCloudShadow.x;
	vecPosition.y = vecPosition.z * vecCloudShadow.y;
	vecPosition.xy += float2( vecCloudShadow.zw );
	
	return vecPosition;
}


VS_OUTPUT StandardProjectionShadow_MeshShader_vs( float4 vPos : POSITION, 
								  float3 vNormal : NORMAL,
								  float3 vTangent : TANGENT,
								  float3 vBinormal : BINORMAL,
								  float2 vTexCoord0 : TEXCOORD0,
								  float2 vTexCoord1 : TEXCOORD1 )
{    
	VS_OUTPUT Output = (VS_OUTPUT)0;	
	Output.Position = mul( vPos, matWorldViewProj );
    Output.Texture.xy = vTexCoord0;    
    Output.Texture2.xy = mul( vPos, matSimpleProjectionTexScale );
    
    float3x3 vecTransTangentSpace;
    vecTransTangentSpace[ 0 ] = normalize( mul( vTangent * 2.0f - 1.0f, matWorld ) );
    vecTransTangentSpace[ 1 ] = normalize( mul( vBinormal * 2.0f - 1.0f, matWorld ) );
    vecTransTangentSpace[ 2 ] = normalize( mul( vNormal * 2.0f - 1.0f, matWorld) );        
    
    Output.Fex.w = saturate( 0.8f - max( dot( vecTransTangentSpace[ 2 ], vecSunDirection ), float3( 0.0f, 0.0f, 0.0f ) ) );
    
    float3 vecPosition = mul( vPos, matWorld );
    
    float3 vecInSectorPosition = vecPosition - vecSectorPosition;    
    
    vecInSectorPosition *= 1.0f / ( 31507.686f );
    
    Output.Texture.z = vecInSectorPosition.x;
    Output.Texture.w = vecInSectorPosition.z;
    
    //float3 ViewPosition = vecViewPosition - vecPosition;   
    
    //Output.ViewPosition = normalize( ViewPosition );
    
    ///////////////////////////////////////////
    
    float4 vecTransformPosition = mul( vPos, matWorld );
	float3 vecViewDirection = normalize( vecViewPosition - vecTransformPosition );
	Output.Half = mul( vecTransTangentSpace, ( vecViewDirection + vecSunDirection ) );	
	
	Output.Tangent = float3( ( vecTransTangentSpace[ 0 ].x + 1.0f ) * 0.5f, ( vecTransTangentSpace[ 1 ].x + 1.0f ) * 0.5f, ( vecTransTangentSpace[ 2 ].x  + 1.0f ) * 0.5f);
    Output.Binormal = float3( ( vecTransTangentSpace[ 0 ].y + 1.0f ) * 0.5f, ( vecTransTangentSpace[ 1 ].y + 1.0f ) * 0.5f, ( vecTransTangentSpace[ 2 ].y  + 1.0f ) * 0.5f);
    Output.Normal = float3( vecTransTangentSpace[ 0 ].z, vecTransTangentSpace[ 1 ].z, vecTransTangentSpace[ 2 ].z );    
	
	float3 vecLin, vecFex;
	
	HoffmanScattering( vPos, vecLin, vecFex );        
	
	Output.Fex.xyz = vecFex;	
	Output.Lin = vecLin * 0.4f;	
	
	Output.CloudShadowmap = CloudShadow( vPos );   
            
    return Output;
}

float4 StandardProjectionShadow_MeshShader_ps( float4 Texture    : TEXCOORD0,
										float3 Tangent	  : COLOR0,
										float3 Binormal   : COLOR1,
										float3 Normal	  : TEXCOORD3,
										float3 Half		  : TEXCOORD4,
										float4 Texture2  : TEXCOORD5,    
										float2 CloudShadowmap : TEXCOORD6,
										float4 Fex		  : TEXCOORD1,
										float3 Lin		  : TEXCOORD2 ) : COLOR
{
	
	float4 vecHeightSpecular = tex2D( SpecularTextureSampler, Texture);	
					
	float3 NormalTex;
	NormalTex = ( tex2D( NormalTextureSampler, Texture ).xyz - 0.5f ) * 2.0f;			
	
	float3x3 matRotate = float3x3( Tangent * 2.0f - 1.0f, Binormal* 2.0f - 1.0f, Normal );	
	
	NormalTex.y *= 1.5f;
	NormalTex = normalize( NormalTex );	
	
	float3 vecTransNormal = mul( matRotate, NormalTex );			
	
	float3 vecSpecular = pow( saturate ( dot( normalize( Half ), NormalTex ) ), 8.0f  ) * vecHeightSpecular.x * 2.0f;	
	
	float4 vecLight = saturate( tex2D( ShadowmapSampler, Texture2 ) + float4( 0.1f, 0.1f, 0.1f, 1.0f ) + Fex.w );	
	
	vecLight.xyz *= texCUBE( LightSampler, vecTransNormal );
	vecLight.xyz = max( vecLight.xyz, vecShadowColor );
	
	float4 vec = vecLight * tex2D( ColorTextureSampler, Texture );			
	//vec.xyz *= vecObjectLightmapLightIntensity.x;				
	vec.xyz = vec * Fex + Lin;
	vec.xyz += vecSpecular * vecLight.xyz;
	vec.xyz *= max( ( 1.0f - tex2D( CloudShadowmapSampler, CloudShadowmap ).a ), 0.4f );			
	
	return vec;
	
}