
float4x4 matWorldViewProj;
float4x4 matWorld;

float4x4 matShadowProjectionTexScale;
float4x4 matCharacterShadowCameraProj;
float3 vecViewPosition;

float3 vecSunDirection;
float3 vecBrBm;
float4 vecHen;
float3 vecBm;
float3 vecBr;

float3 vecAtmosphereColor;	
float3 vecLin;

float3 vecCharacterLightPosition;
float3 vecCharacterLightColor;
float3 vecCharacterShadowColorDepth;

float4x4 matSunLightDirection;
float3 vecCharacterLightDepth;
float4 vecCharacterAddColor;

float3 vecCharacterLightDirection1;
float3 vecCharacterLightDirection2;
float3 vecCharacterLightDirection3;

float3 vecCharacterLightColor1;
float3 vecCharacterLightColor2;
float3 vecCharacterLightColor3;

float3 vecCharacterSpecularLightColor1;
float3 vecCharacterSpecularLightColor2;
float3 vecCharacterSpecularLightColor3;
float3 vecCharacterAmbientColor;
float3 vecCharacterShadowColor;
float vecCharacterSpecularExp1;
float vecCharacterSpecularExp2;
float vecCharacterSpecularExp3;
float vecCharacterGlare1;
float vecCharacterGlare2;
float vecCharacterGlare3;



struct VS_OUTPUT
{
    float4 Position   : POSITION;   // vertex position     
    float2 Texture    : TEXCOORD0;
    float3 Light0	  : TEXCOORD1;
    float3 Light1	  : TEXCOORD2;
    float3 Light2	  : TEXCOORD3;            
    float3 Half0	  : TEXCOORD4;    
    float3 Half2	  : TEXCOORD5;        
    float3 Shadowmap : TEXCOORD6;    
	float3 Half1 : TEXCOORD7;
    float3 Diffuse    : COLOR0;
    float4 DynamicLight : COLOR1;
};

sampler ColorTextureSampler : register(s0);
sampler NormalTextureSampler : register(s1);
sampler SpecularTextureSampler : register(s2);
samplerCUBE LightSampler : register( s3 );
sampler ShadowmapSampler : register( s4 );
samplerCUBE EnvSampler : register( s5 );
sampler NearShadowmapSampler : register( s6 );

float3 Lin( in float3 Fex, in float fCosTheta, in float fPlusOneCosTheta )
{		
	float3 vecBmTheta = vecBm / pow( vecHen.z * fCosTheta + vecHen.y, vecHen.w );				
	
	float3 vecBrTheta = fPlusOneCosTheta * vecBm;
		
	float3 vecLinTheta = ( ( vecBmTheta + vecBrTheta ) * vecLin ) * ( 1.0f - Fex );						
	
	return vecLinTheta;
}

float3 Fex( in float fDistance )
{
	float3 Fex = exp( vecBrBm * ( -fDistance ) );	
	return Fex;
}

float3 PointLight( in float3 vecPosition, in float3 vecLightPosition, in float3 vecNormal, in float3 vecLightColor )
{
	float3 vecDirection = vecLightPosition - vecPosition;
	float fLightDistance = length( vecDirection );
	vecDirection = normalize( vecDirection );
	
	//return dot( vecDirection, vecNormal );
	
	return saturate( dot( vecDirection, vecNormal ) ) * vecLightColor;
	//return vecDirection;
}


VS_OUTPUT Character_Glare_Shader_vs( float4 vPos : POSITION, 
								  float3 vNormal : NORMAL,
								  float3 vTangent : TANGENT,
								  float3 vBinormal : BINORMAL,
								  float2 vTexCoord0 : TEXCOORD0 )
{    
	VS_OUTPUT Output;	
	Output.Position = mul( vPos, matWorldViewProj );
    Output.Texture = vTexCoord0;
    
    float3x3 vecTransTangentSpace;
    vecTransTangentSpace[ 0 ] = mul( vTangent, matWorld );
    vecTransTangentSpace[ 1 ] = mul( vBinormal, matWorld );
    vecTransTangentSpace[ 2 ] = mul( vNormal, matWorld);
    
    Output.Diffuse.xyz = min( dot( vecTransTangentSpace[ 2 ], float3( vecSunDirection.x, vecSunDirection.y, vecSunDirection.z ) ) , float3( 0.8f, 0.8f, 0.8f ) );    
    
    if( vecCharacterShadowColorDepth.x > 0.8f )
		Output.Diffuse.x = -1.0f;    	       
    
    float3 vecPosition = mul( vPos, matWorld );          
    
    float4 vecTransformPosition = mul( vPos, matWorld );
	float3 vecViewDirection = normalize( vecViewPosition - vecTransformPosition );
    
    Output.DynamicLight.xyz = PointLight( vecPosition, vecCharacterLightPosition, vecTransTangentSpace[ 2 ], vecCharacterLightColor );
    float fAniLight = dot( vecCharacterLightDirection1 , vecTransTangentSpace[ 2 ] );	
	fAniLight -= dot( vecViewDirection , vecTransTangentSpace[ 2 ] ) * 4.0f;			
	Output.DynamicLight.w = fAniLight * 0.5f;
    
    ///////////////////////////////////////    
    
    
	//Output.ViewDirection = vecViewDirection;
	Output.Half0 = mul( vecTransTangentSpace, ( vecViewDirection + vecCharacterLightDirection1 ) );		
	Output.Half1 = mul( vecTransTangentSpace, ( vecViewDirection + vecCharacterLightDirection2 ) );// float3( -1.0f, 0.0f, 0.0f ) ) );		
	Output.Half2 = mul( vecTransTangentSpace, ( vecViewDirection + vecCharacterLightDirection3 ) );		
	
	
	Output.Light0 = mul( vecTransTangentSpace, vecSunDirection );		
	Output.Light1 = mul( vecTransTangentSpace, -vecSunDirection );		
	Output.Light2 = mul( vecTransTangentSpace, float3( -1.0f, 0.0f, 0.0f ) );	
	
	Output.Shadowmap = mul( vPos, matShadowProjectionTexScale );	
	
	Output.Shadowmap.xy -= float2( ( 1.0f / 2048 ) * 0.5f, ( 1.0f / 2048 ) * 0.5f );	
	
	float3 vecShadowProj = mul( vPos, matCharacterShadowCameraProj );
	
	if( vecShadowProj.z > 0.999f )	
		Output.Shadowmap.z = 0.999f; 		
	else
		Output.Shadowmap.z = vecShadowProj.z ;	
            
    return Output;
}

float4 Character_Glare_Shader_ps(float3 Tex : TEXCOORD0,
							   float3 Light0 : TEXCOORD1,
							   float3 Light1 : TEXCOORD2,
							   float3 Light2 : TEXCOORD3, 							   							   
							   float3 Half0 : TEXCOORD4,							   
							   float3 Half2 : TEXCOORD5,							   
							   float3 Shadowmap : TEXCOORD6,
							   float3 Half1 : TEXCOORD7,							   							   							   
							   float3 Diffuse    : COLOR0,
							   float4 DynamicLight : COLOR1 ) :COLOR0
{		
	float3 NormalTex = ( tex2D( NormalTextureSampler, Tex ).xyz - 0.5f ) * 2.0f;			
	NormalTex = normalize( NormalTex );		
	
	float3 vecSpecular = pow( max( dot( normalize( Half0 ), NormalTex ), 0.0f ), vecCharacterSpecularExp1 ) * vecCharacterSpecularLightColor1 * 3.0f * vecCharacterGlare1;	
	vecSpecular += pow( max( dot( normalize( Half1 ), NormalTex ), 0.0f ), vecCharacterSpecularExp2 ) * vecCharacterSpecularLightColor2 * 3.0f * vecCharacterGlare2;	
	vecSpecular += pow( max( dot( normalize( Half2 ), NormalTex ), 0.0f ), vecCharacterSpecularExp3 ) * vecCharacterSpecularLightColor3 * 3.0f * vecCharacterGlare3;	
	////////////////////////////////////////////////////////////////
	
	half vecShadowTest = 1.0f;
	{	
	
		float4 ShadowmapTex = tex2D( ShadowmapSampler, Shadowmap );
		float fTemp = ShadowmapTex.x / 8.0f + ShadowmapTex.y;						
		if( fTemp < Shadowmap.z - 0.001f )
		{			
			vecShadowTest = 0.0f;
		}		
	}
	
	/////////////////////////
	float3 vecSpecularMaskTexture = tex2D( SpecularTextureSampler, Tex );		
	
	float4 vecColorTex = tex2D( ColorTextureSampler, Tex );
	
	vecSpecular *= vecSpecularMaskTexture.x * vecShadowTest; 		
	//vecSpecular.xyz += DynamicLight.w * vecShadowTest;
	return float4( vecSpecular.xyz, vecColorTex.w );	
	//return float4( float3( 1.0f, 1.0f, 1.0f ), vecColorTex.w );	
}