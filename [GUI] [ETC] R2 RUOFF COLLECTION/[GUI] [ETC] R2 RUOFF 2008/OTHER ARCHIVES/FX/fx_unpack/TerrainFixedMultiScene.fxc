float4x4 matWorldViewProj;
float4x4 matWorld;
float4x4 matView;
float4x4 matShadowProjectionScale;
float4x4 matShadowProjectionScale2;
float3 vecViewPosition;
float4 vecLowFogColor;
float fFogStart;
float fFogEnd;
float4 vecScatterEndColor;
float3 vecHeightFog;
float4 vecOceanColor;

struct VS_OUTPUT
{
    float4 Position		 : POSITION;   // vertex position     
    float2 Texture		 : TEXCOORD0;
    float2 CliffTexture1 : TEXCOORD1;
    float2 CliffTexture2 : TEXCOORD2;
    float  Fog           : TEXCOORD3;
	float  OceanFog      : TEXCOORD4;
};

sampler CliffMaskSampler : register(s0);
sampler CliffDetailSampler : register(s1);
sampler CliffDetailSampler2 : register(s2);
sampler OcclusionSampler : register(s3);

VS_OUTPUT TerrainFixedMulti_Shader_vs( float4 vPos : POSITION,							  
								  float2 vTexCoord0 : TEXCOORD0 )
{	
	VS_OUTPUT Output;	
	Output.Position = mul( vPos, matWorldViewProj );
	float3 vecTransformPosition = mul( vPos, matWorld );
    float fLens = length( vecTransformPosition - vecViewPosition );
    Output.Fog = saturate( ( fLens - fFogStart ) / ( fFogEnd - fFogStart ) );
	Output.Texture = vTexCoord0;
	float4x4 matTrans = mul( matView, matShadowProjectionScale );
	Output.CliffTexture1 = mul( vecTransformPosition, matTrans );
	matTrans = mul( matView, matShadowProjectionScale2 );
	Output.CliffTexture2 = mul( vecTransformPosition, matTrans );	
	
	if( vecTransformPosition.y < vecHeightFog.y )
	{
		float3 vecV = vecTransformPosition - vecViewPosition;
		float fX = ( vecHeightFog.y - vecViewPosition.y ) / vecV.y;
		float3 vecP = vecViewPosition + fX * vecV;
		Output.OceanFog = saturate( length( vecP - vecTransformPosition ) / vecHeightFog.z );
	}
	else
	{
		Output.OceanFog = 0;
	}
    
    return Output;
}

float4 TerrainFixedMulti_Shader_ps( VS_OUTPUT In ) : COLOR
{
	float4 vecMask = tex2D( CliffMaskSampler, In.Texture );
	float4 vecShadow = tex2D( OcclusionSampler, In.Texture );
	float4 vecCliffTex1 = tex2D( CliffDetailSampler, In.CliffTexture1 );
	float4 vecCliffTex2 = tex2D( CliffDetailSampler2, In.CliffTexture2 );	
	float4 vecTexColor = vecCliffTex1 * vecCliffTex2 * vecScatterEndColor * 4;
	vecTexColor.xyz = vecTexColor.xyz * vecShadow.xyz * 2;
	vecTexColor.xyz = lerp( vecTexColor.xyz, vecLowFogColor, In.Fog );
	vecTexColor.xyz = lerp( vecTexColor.xyz, vecOceanColor.xyz, In.OceanFog );	
	vecTexColor.a = vecMask.a;
	return vecTexColor;
}