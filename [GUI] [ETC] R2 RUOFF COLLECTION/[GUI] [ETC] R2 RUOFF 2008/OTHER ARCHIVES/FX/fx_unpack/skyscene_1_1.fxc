
float4x4 matWorldViewProj;
float4x4 matWorld;
float3 vecViewPosition;
float3 vecSunDirection;

float3 vecSunColor;		
float3 vecSkyColor;
float fMultiplySunColor;
float fMultiplyHorizonColor;
float3 vecHorizonColor;
float fHorizonExp;
float fSunExp;
float3 vecHeightFog;
float3 vecOceanColor;
float fSkyLightMultifly;

struct VS_OUTPUT
{
    float4 Position   : POSITION;   // vertex position         
    float3 Fex : TEXCOORD0 ;    
    float4 Lin : COLOR ;    
};

	
void HoffmanScattering( in float4 vecPosition, out float3 vecLin, out float3 vecFex )
{
	float4 vecTransformPosition = mul( vecPosition, matWorld );
	float3 vecViewDirection = vecTransformPosition - vecViewPosition;
		
	vecViewDirection = normalize( vecViewDirection );
	
	float fTheta = saturate( dot( vecSunDirection, vecViewDirection ) );
	fTheta = pow( fTheta, fSunExp );
	
	float3 vecXYDirection = vecViewDirection;	
	vecXYDirection.y = 0.0f;	
	vecXYDirection = normalize( vecXYDirection );		
		
	float3 vecHorizon = pow( saturate( dot( vecXYDirection, vecViewDirection ) ), fHorizonExp ) * vecHorizonColor * fMultiplyHorizonColor;
	
	float3 vecInscatter = vecSunColor * fTheta * fMultiplySunColor + vecSkyColor + vecHorizon;	
	
	vecLin = vecInscatter;
	
	vecFex = float3( 0.0f, 0.0f, 0.0f );				
}

VS_OUTPUT Sky_Shader_vs( float4 vPos : POSITION )								  
{	
	VS_OUTPUT Output;	
	Output.Position = mul( vPos, matWorldViewProj );        
    float3 vecLin, vecFex;
    
    HoffmanScattering( vPos, vecLin, vecFex );
    
    Output.Fex = vecFex;
    Output.Lin.xyz = vecLin * fSkyLightMultifly;
	float4 vecPos = mul( vPos, matWorld );
	if( vecPos.y < vecHeightFog.y )
	{
		float3 vecV = vecPos - vecViewPosition;
		float fX = ( vecHeightFog.y - vecViewPosition.y ) / vecV.y;
		float3 vecP = vecViewPosition + fX * vecV;
		Output.Lin.w = saturate( length( vecP - vecPos ) / vecHeightFog.z );
	}
	else
	{
		Output.Lin.w = 0;
	}
    return Output;
}

float4 Sky_Shader_ps( float3 Fex : TEXCOORD0,
						 float4 Lin : COLOR ) : COLOR
{	
	float4 vecColorTex = float4( Lin.xyz, 0.0f );	
	return vecColorTex;	
}	